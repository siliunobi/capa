--- file:     table.maude
--- requires: prelude, apmaude, generic
--- comment:  Defines a basic table structure with support for metadata.


fmod TABLE-SORTS is 
  	pr ADDRESS .                                                             ---Address     
	sorts Key Value Metadata .                                                               
endfm
view Key      from TRIV to TABLE-SORTS is sort Elt to Key .      endv
view Value    from TRIV to TABLE-SORTS is sort Elt to Value .    endv
view Metadata from TRIV to TABLE-SORTS is sort Elt to Metadata . endv
view Address  from TRIV to TABLE-SORTS is sort Elt to Address . endv             ---Address

fmod TABLE-IFACE is                                                              
  pr FLOAT .
  pr TUPLE3{Value,Float,Address} *                                               ---Address
	  (sort Tuple3 to TableData) .
---(
	sort Metadatum .
	subsort Metadata < Metadatum .
	op __ : Metadata Metadata -> Metadata [assoc comm id: empty] .
	op empty : -> Metadata .
)
	op null : -> Key .
	op null : -> Value .
        op error : -> Value .
endfm


view TableData from TRIV to TABLE-IFACE is
	sort Elt to TableData .
endv

fmod TABLE is
  pr MAP-EXTRA{Key,TableData} *
	  (sort MapX{Key,TableData} to Table,
		 sort EntryX{Key,TableData} to TableEntry,
		 op insert to raw-insert).
	pr TABLE-IFACE .

---	op insert : Key Value Float Metadata Table -> Table .
	op insert : Key Value Float Address Table -> Table .
	op insert : Key Value Float Table -> Table .

	--- TODO:
	--- filter on metadata operation might be
	--- very useful for collecting lots of data

	var K : Key .
	var V : Value .
	var F : Float .
	var M : Metadata .
	var S : Table .
	var A : Address .

---	eq insert(K,V,F,M,S) = raw-insert(K,(V,F,M),S) .
---	eq insert(K,V,F,S)   = insert(K,V,F,empty,S) .

	eq insert(K,V,F,A,S) = raw-insert(K,(V,F,A),S) .
endfm
