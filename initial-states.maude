load walter

(omod KEY-VARS is
  inc WALTER .

  sort KeyVar .
  sort KeyVars .
  subsort KeyVar < KeyVars .

  op noKeyVar : -> KeyVars [ctor] .
  op <_`,_> : Key LocalVar -> KeyVar [ctor] .
  op _;_ : KeyVars KeyVars -> KeyVars [ctor assoc id: noKeyVar] .


  vars N KEYS : Nat .
  vars K K' : Key .
  vars KVARS KVARS' : KeyVars .
  var VARS : LocalVars .
  var VAR : LocalVar .
  vars KS KS' : KeySet .


  ops k1l k2l : -> LocalVar .
  ops k1  k2 : -> Key .


  op keyVars : -> KeyVars .
  eq keyVars = < k1,k1l > ; < k2,k2l > .


  op kvars : Nat KeyVars -> KeyVars .
  eq kvars(s KEYS, (< K,VAR > ; KVARS)) = < K,VAR > ; kvars(KEYS,KVARS) .
  eq kvars(0,KVARS) = noKeyVar .
  eq kvars(KEYS,noKeyVar) = noKeyVar .
endom)
(view KeyVar from TRIV to KEY-VARS is sort Elt to KeyVar . endv)


(omod INITIAL-STATES is
  inc KEY-VARS .
  pr SET{KeyVar} * (sort Set{KeyVar} to KeyVarSet) .

  op genKeyVarSet : KeyVars -> KeyVarSet .
  eq genKeyVarSet((< K,VAR > ; KVARS)) = < K,VAR >, genKeyVarSet(KVARS) .
  eq genKeyVarSet(noKeyVar) = empty .

  op rf : -> Nat . --- replication factor
  eq rf = 2 .

  vars RTX WTX RWTX PARS KEYS PAR2 ROPS WOPS RWOPS R-OR-W-OR-RW N RF : Nat .
  vars K K' : Key .
  vars KVARS KVARS' : KeyVars .
  var VARS : LocalVars .
  vars VAR VAR' : LocalVar .
  vars RID TB TID : Oid .
  var C : Configuration .
  var VS : Datastore .
  var RIDS : OidList .
  var KEYREPLICAS : KeyReplicas .
  vars TXNS TXNS' : ObjectList .
  var OPS : OperationList .
  var EXPR : Expression .
  vars KS KS' : KeyVarSet .


  --- generate "all" initial states with bounded parameters
  op initConfig : -> Configuration .

  sort InitConf .
  subsort Configuration < InitConf .

  --- # of ro-txns, # of wo-txns, # of rw-txns, 
  --- # of partitions, # of keys, replication factor
  --- we fix # of ops per txn as 2
  op init : NzNat NzNat NzNat 
            NzNat NzNat NzNat -> InitConf [frozen] .

 crl init(RTX,WTX,RWTX,PARS,KEYS,RF)  
  => C if initial(RTX,WTX,RWTX,PARS,KEYS,RF,none) 
         => initial(0,0,0,0,0,RF,C) .

  sort temp .
  op initial : NzNat NzNat NzNat 
               NzNat NzNat NzNat Configuration -> temp [frozen] .

  op $initial : NzNat NzNat NzNat 
                NzNat KeyVars KeyVarSet NzNat Configuration -> temp [frozen] .


  --- generate table and key-var pairs
  eq initial(RTX,WTX,RWTX,PARS,KEYS,RF,none) 
  =  $initial(RTX,WTX,RWTX,PARS,kvars(KEYS,keyVars),genKeyVarSet(kvars(KEYS,keyVars)),
       RF,< 0 : Table | table : initTable(kvars(KEYS,keyVars)) > 
          < 100 : Monitor | clock : 0, log : empty >) .

  --- initialize table with generated keys
  op initTable : KeyVars -> ReplicaTable .
  op $initTable : KeyVars ReplicaTable -> ReplicaTable .
  eq initTable(KVARS) = $initTable(KVARS,[emptyTable]) .
  eq $initTable((< K,VAR > ; KVARS),[KEYREPLICAS]) = $initTable(KVARS,[replicatingSites(K,nil) ;; KEYREPLICAS]) .
  eq $initTable(noKeyVar,[KEYREPLICAS]) = [KEYREPLICAS] . 

  --- generate replicas
  eq $initial(RTX,WTX,RWTX,s PARS,KVARS,KS,RF,C)
  =  $initial(RTX,WTX,RWTX,PARS,KVARS,KS,RF,C
              < s PARS : Replica | gotTxns : emptyTxnList, history : empty, sqn : 0, 
                                   executing : emptyTxnList, committed : emptyTxnList, 
                                   aborted : emptyTxnList, committedVTS : empty, gotVTS : empty, 
                                   locked : empty, dsSites : noPS, vsbSites : noVS,
                                   dsTxns : empty, gvTxns : empty, recPropTxns : noPT, 
                                   recDurableTxns : noDT, votes : noVote, voteSites : noVS, 
                                   abortSites : noVS >) .

  --- assign keys to partitions and update table accordingly
 crl $initial(RTX,WTX,RWTX,0,(< K,VAR > ; KVARS),KS,s RF,< RID : Replica | history : VS >
              < 0 : Table | table : [replicatingSites(K,RIDS) ;; KEYREPLICAS] > C)
  => $initial(RTX,WTX,RWTX,0,(< K,VAR > ; KVARS),KS,RF,< RID : Replica | history : (VS,K |-> (< [0],version(0,0) >)) > 
              < 0 : Table | table : [replicatingSites(K,RIDS RID) ;; KEYREPLICAS] > C) 
     if not $hasMapping(VS,K) .

  --- next key
  eq $initial(RTX,WTX,RWTX,0,(< K,VAR > ; KVARS),KS,0,C)
  =  $initial(RTX,WTX,RWTX,0,KVARS,KS,rf,C) .

  --- generate txns
  --- generate rw-txns
  --- if it is the first one
  rl $initial(RTX,WTX,s RWTX,0,noKeyVar,(< K,VAR >,KS),RF,< RID : Replica | gotTxns : emptyTxnList > C)
  => $initial(RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,KS),RF,
              < RID : Replica | gotTxns : 
                < s RWTX + RID * 10  : Txn | operations : ((VAR :=read K) write(K,s RWTX)), readSet : empty, 
                                         writeSet : empty, localVars : (VAR |-> [0]), 
                                         startVTS : empty, txnSQN : 0 > > C) .

  --- if it is not the first one
  rl $initial(RTX,WTX,s RWTX,0,noKeyVar,(< K,VAR >,KS),RF,< RID : Replica | gotTxns : TXNS ;; < TID : Txn | > > C)
  => $initial(RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,KS),RF,
              < RID : Replica | gotTxns : TXNS ;; < TID : Txn | > ;;
                < TID + 1 : Txn | operations : ((VAR :=read K) write(K,s RWTX)), readSet : empty, 
                                    writeSet : empty, localVars : (VAR |-> [0]), 
                                    startVTS : empty, txnSQN : 0 > > C) .

  --- generate read-only txns
  --- if it is the first one
  rl $initial(s RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,< RID : Replica | gotTxns : emptyTxnList > C)
  => $initial(RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,
              < RID : Replica | gotTxns : 
                < s RTX + RID * 10 : Txn | operations : ((VAR :=read K) (VAR' :=read K')), readSet : empty, 
                                        writeSet : empty, localVars : (VAR |-> [0], VAR' |-> [0]), 
                                        startVTS : empty, txnSQN : 0 > > C) .

  --- if it is not the first one
  rl $initial(s RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,
              < RID : Replica | gotTxns : TXNS ;; < TID : Txn | > > C)
  => $initial(RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,
              < RID : Replica | gotTxns : TXNS ;; < TID : Txn | > ;;
                < (TID + 1) : Txn | operations : ((VAR :=read K) (VAR' :=read K')), readSet : empty, 
                                    writeSet : empty, localVars : (VAR |-> [0], VAR' |-> [0]), 
                                    startVTS : empty, txnSQN : 0 > > C) .

  --- generate write-only txns
  --- if it is the first one
  rl $initial(RTX,s WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,< RID : Replica | gotTxns : emptyTxnList > C)
  => $initial(RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,
              < RID : Replica | gotTxns : 
                < s WTX + RID * 10 : Txn | operations : (write(K,s WTX) write(K',s s WTX)), readSet : empty, 
                                        writeSet : empty, localVars : (VAR |-> [0], VAR' |-> [0]), 
                                        startVTS : empty, txnSQN : 0 > > C) .
  --- if it is not the first one
  rl $initial(RTX,s WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,
              < RID : Replica | gotTxns : TXNS ;; < TID : Txn | > > C)
  => $initial(RTX,WTX,RWTX,0,noKeyVar,(< K,VAR >,< K',VAR' >,KS),RF,
              < RID : Replica | gotTxns : TXNS ;; < TID : Txn | > ;;
                < (TID + 1) : Txn | operations : (write(K,s WTX) write(K',s s WTX)), readSet : empty, 
                                    writeSet : empty, localVars : (VAR |-> [0], VAR' |-> [0]), 
                                    startVTS : empty, txnSQN : 0 > > C) .

  --- all stuff haven been generated
  eq $initial(0,0,0,0,noKeyVar,KS,RF,C) 
   = initial(0,0,0,0,0,RF,C) .

endom)

---(rew init(0,0,1,2,2,rf) .)

---(search init(0,0,4,2,2,rf) =>! C:Configuration .)
--- 4480 solutions

---(search init(0,0,4,2,2,rf) =>! C:Configuration .)


