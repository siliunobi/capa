load prelim

(omod REPLICA-TABLE is
  including TXN-AUX1 .

  sort KeyReplicas .

  op emptyTable : -> KeyReplicas [ctor] .
  op replicatingSites : Key OidList -> KeyReplicas [ctor] .  --- head of list is preferred site
  op _;;_ : KeyReplicas KeyReplicas -> KeyReplicas [ctor assoc comm id: emptyTable] .


  var RT : KeyReplicas .
  var K : Key .
  var KS : KeySet .
  vars RID RID' : Oid .
  var RIDS : OidSet .
  vars RIDSS RIDSS' : OidList .
  var WS : WriteSet .
  var V : Value .

  op replicas : WriteSet KeyReplicas -> OidSet .
  eq replicas(empty,RT) = empty .
  eq replicas((K |-> V,WS), replicatingSites(K,RIDSS) ;; RT) =
       makeSet(RIDSS), replicas(WS,RT) .
  eq replicas(WS,RT) = empty [owise] .

  op allServers : KeyReplicas -> OidSet .
  eq allServers(replicatingSites(K,RIDSS) ;; RT) = 
       makeSet(RIDSS), allServers(RT) .
  eq allServers(emptyTable) = empty . 
  
  op makeSet : OidList -> OidSet .
  eq makeSet((RID RIDSS)) = RID, makeSet(RIDSS) .
  eq makeSet(nil) = empty .

  op preferredSite : Key KeyReplicas -> Oid .
  eq preferredSite(K,(replicatingSites(K,(RID RIDSS)) ;; RT)) = RID .

  op allPreferredSites : WriteSet KeyReplicas -> OidSet .
  eq allPreferredSites((K |-> V,WS), replicatingSites(K,(RID RIDSS)) ;; RT) =
       RID, allPreferredSites(WS,RT) .
  eq allPreferredSites(empty,RT) = empty .
  eq allPreferredSites(WS,RT) = empty [owise] .

  op `[_`] : KeyReplicas -> ReplicaTable [ctor] .

  op replicas : WriteSet ReplicaTable -> OidSet .
  eq replicas(WS, [RT]) = replicas(WS, RT) .
  op preferredSite : Key ReplicaTable -> Oid .
  eq preferredSite(K,[RT]) = preferredSite(K,RT) .
  op allServers : ReplicaTable -> OidSet .
  eq allServers([RT]) = allServers(RT) .
  op allPreferredSites : WriteSet ReplicaTable -> OidSet .
  eq allPreferredSites(WS,[RT]) = allPreferredSites(WS,RT) .

  op localReplica : Key Oid ReplicaTable -> Bool .
  op localReplica : Key Oid KeyReplicas -> Bool .
  eq localReplica(K,RID,[RT]) = localReplica(K,RID,RT) .
  eq localReplica(K,RID,replicatingSites(K, RIDSS RID RIDSS') ;; RT) = true .
  eq localReplica(K,RID,RT) = false [owise] .

  op allLocalPreferred : WriteSet Oid ReplicaTable -> Bool .
  op allLocalPreferred : WriteSet Oid KeyReplicas -> Bool .
  eq allLocalPreferred(WS,RID,[RT]) = allLocalPreferred(WS,RID,RT) .
 ceq allLocalPreferred((K |-> V,WS),RID,replicatingSites(K,RID' RIDSS) ;; RT) = false
       if RID =/= RID' .
  eq allLocalPreferred(WS,RID,RT) = true [owise] .

  op _in_ : Oid OidList -> Bool .
  eq RID in (RIDSS RID RIDSS') = true .
  eq RID in RIDSS = false [owise] .

  op locRepWS : WriteSet Oid ReplicaTable -> WriteSet .
  op locRepWS : WriteSet Oid KeyReplicas -> WriteSet .
  eq locRepWS(WS,RID,[RT]) = locRepWS(WS,RID,RT) .
  eq locRepWS((K |-> V,WS),RID,replicatingSites(K,RIDSS RID RIDSS') ;; RT) =
       K |-> V, locRepWS(WS,RID,RT) .
  eq locRepWS(WS,RID,RT) = empty [owise] .
 

  ---(
  --- test
  ops k1 k2 k3 : -> Key .
  ops v1 v2 v3 : -> Value .
  ops rid1 rid2 rid3 : -> Oid .
  op flag : -> Bool .

  eq flag = allLocalPreferred((k1 |-> v1, k2 |-> v2, k3 |-> v3),rid1,[replicatingSites(k1,(rid1 rid2)) ;; 
                                                                      replicatingSites(k2,(rid1 rid3)) ;;
                                                                      replicatingSites(k3,(rid2 rid1))]) .
  )
endom)


