*** GDUR, Algorithm 1 and Algorithm 2, except lines 16-18
*** in Algorithm 2, which, for the moment at least, is
*** deferred to the corresponding certification
*** protocol, because (i) other application-specific
*** actions may have to happen at the same time, 
*** and (ii) if it is an atomic multicast, some other
*** conditions must be present for delivery. No
*** surprise there.

*** If a process reads a value previously written by
*** the same transaction, we do NOT add that read
*** to the read set. 

*** Notice that the GDUR paper does not include
*** information about when the read sets are updated,
*** only about the write sets. Read sets are just assumed
*** informally without further discussions ...

load prelim-mc
load replica-table-mc
load atomic-multicast-mc

*** Some parameters in GDUR Algorithms 1 and 2:

mod SOME-PARAMETERS-2 is
  including SORTS .
  including REPLICA-TABLE .
*** NEW
  including VERSION-NAT .

  op $$xcast_from_to_ : Content Address AddressSet -> Config .
 
  op $$choose : Key DataStore Address -> DataStore .
  --- Notice:
  --- 1. According to the GDUR paper, the $$choose function
  --- actually returns a SET of possible KeyValueVersion values.
  --- 2. The transaction is supposed to be a parameter.
  --- The trans id or something more?

---  op $$certifying-objects : Object ReplicaTable -> KeySet .
  op $$certifying-objects : Actor ReplicaTable -> KeySet .

---  msgs $$postAbort $$postCommit : TransId ReplicaId ReplicaId ReadSet WriteSet -> Msg .
  op $$postAbort : Address Address Address Set{KeyVersion} Set{KeyValue} -> Msg .
*** NEW 
  op $$postCommit : Address Address Address Set{KeyVersion} Set{KeyVersion} -> Msg .

  op applyUpdates : DataStore Set{KeyValue} -> DataStore .
  --- GDUR unfortunately does not tell us which is the new
  --- version of the write to enter into the database.
  --- This function will therefore depend on the versioning
  --- mechanism ...


*** NEW
  var K : Key .
  vars V V2 : Value .
  var VERSION : Version .
  var DS : DataStore .
  var WS : Set{KeyValue} .
  var KVER : Set{KeyVersion} .

  op kver : DataStore Set{KeyValue} -> Set{KeyVersion} .
  eq kver((< K, V, VERSION > , DS), (< K,V2 > , WS)) =
       < K, VERSION + 1 > , kver(DS, WS) .
  eq kver(DS, WS) = empty [owise] .


  op kver : Set{KeyValue} Set{KeyVersion} -> Set{KeyVersion} . 
  eq kver(WS,KVER) = KVER .

endm  

*** GDUR, Algorithm 3; group communication certification.

*** QUESTION: the parameters vote-snd-obj and vote-recv-obj
*** are not very well explained.  I wonder whether there
*** is a typo here, and that vote-snd-obj and vote-recv-obj
*** should be the same thing ...
*** Of course, it is hard to udnerstand the function
*** 'outcome' since vote-snd-obj is not described,
*** but IF it is the same, then I wonder about
*** the true case: if the node does not any other
*** replica's help, because we are talking about a
*** local transaction, then I am not sure about the 'true'.
*** The node itself must at least certify the trans???
*** I therefore ad-lib this part somewhat. Maybe this
*** outcome thing will have to be refined when we discover
*** other protocols?

mod GDUR-GROUP-COMMIT-PARAMETERS is
  inc CLASSES .
  inc MESSAGES .
  inc SOME-PARAMETERS-2 .

  --------------------------
  --- Formal Parameters
  --------------------------

  op $$vote-receiving-objects : Address Set{KeyVersion} Set{KeyValue} ReplicaTable -> KeySet .

  op $$commute : Actor Set{KeyVersion} Set{KeyValue} -> Bool .
    
  op $$certify : Set{KeyVersion} Set{KeyValue} DataStore -> Bool .

  op $$vote-snd-objects : Address Set{KeyVersion} Set{KeyValue} -> KeySet .
  --- not much said about this one in GDUR paper
  --- is it just a typo??

  msgs $$postAbort $$postCommit : Address Address Set{KeyVersion} Set{KeyValue} -> Msg .
endm

