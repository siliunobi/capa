  --- Is history a sorted list? 
  --- Section 5.3, what does "last upate" mean? Last in list order, or in time?
  --- When initializing VTS, all replicas know each other, i.e., each replica holds
  --- the same length of vector, or VTS is simply set to empty?
  --- As of now, we implement the latter

load walter-aux

(omod WALTER is
  inc WALTER-AUX .

  vars TID RID RID' TABLE M RID@M : Oid .
  vars RIDS DSTXNS GVTXNS : OidSet .
  vars TXNS TXNS' TXNS'' : ObjectList .
  var OPS : OperationList .
  var K : Key .
  vars V V' : Value .
  var X : LocalVar .
  vars WS WRITES : WriteSet .
  var VARS : LocalVars .
  vars RS READS : ReadSet .
  var REPLICA-TABLE : ReplicaTable .
  var VERSION : Version .
  vars VTS VTS' VTS'' VTS1 : VectorTimestamp .
  vars DS DS' : Datastore .
  vars VVS VVS' : ValueVersionList .
  vars SQN SQN' TXNSQN CLOCK GT T1 T2 T3 T4 : Nat .
  var EXPR : Expression .
  var KS : KeySet .
  var LOCKS : Locks .
  vars VSTS VSTS' VSBS VSBS' ABORTS ABORTS' : VoteSites .
  vars RIDSS RIDSS' : OidList .
  var RT : KeyReplicas .
  vars VOTES VOTES' : Vote .
  vars FLAG FLAG' : Bool .
  vars PSTS PSTS' : PropagateSites .
  vars PTXNS PTXNS' PTXNS'' : PropagatedTxns .
  vars DTXNS DTXNS' : DurableTxns .
  var LOG : Log .


    rl [start-txn] :
	< M : Monitor | clock : GT, log : LOG >
	< RID : Replica | gotTxns : (< TID : Txn | startVTS : empty > ;; TXNS), 
        executing : emptyTxnList,
	committedVTS : VTS >
      =>
	< M : Monitor | clock : GT + 1, log : insert(TID,record(RID,GT,empty,false,empty,empty),LOG) >
	< RID : Replica | gotTxns : TXNS,
			  executing : < TID : Txn | startVTS : VTS >, 
        committedVTS : VTS > .


   rl [commit-read-only-txn] :
      < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG,READS,WRITES),LOG) >
      < RID : Replica | executing : < TID : Txn | operations : nil, writeSet : WS,
                                                  readSet : RS >, 
                        committed : TXNS' >
    =>
      < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),true,RS,WS),LOG) >
      < RID : Replica | executing : emptyTxnList, 
                        committed : (TXNS' ;; < TID : Txn | operations : nil, 
                                                            writeSet : WS, readSet : RS >) > .


 crl [fast-commit-success] :  --- committedVTS[i] = x.sqn-1
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG,READS,WRITES),LOG) >
     < TABLE : Table | table : REPLICA-TABLE >
     < RID : Replica | executing : < TID : Txn | operations : nil,
                                                 readSet : RS,
                                                 writeSet : WS,
                                                 startVTS : VTS,
                                                 txnSQN : TXNSQN >, 
                       committed : TXNS', history : DS,  
                       locked : LOCKS, sqn : SQN, 
                       committedVTS : VTS', dsSites : PSTS >
   =>
     < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),true,RS,WS),LOG) >
     < TABLE : Table | table : REPLICA-TABLE >
     < RID : Replica | executing : emptyTxnList,
                       committed : (TXNS' ;; < TID : Txn | operations : nil,
                                                           readSet : RS,
                                                           writeSet : WS,
                                                           startVTS : VTS, 
                                                           txnSQN : SQN' >),
                       history : DS', locked : LOCKS,
                       sqn : SQN', committedVTS : VTS'', dsSites : PSTS' >
     propagateTxn(TID,SQN',VTS,WS,allServers(REPLICA-TABLE),RID)  

     if WS =/= empty /\
        allLocalPreferred(WS,RID,REPLICA-TABLE) /\
        (not modified(WS,VTS,DS)) /\
        (not locked(WS,LOCKS)) /\
        SQN' := SQN + 1 /\
        DS' := update(WS,version(RID,SQN'),DS) /\
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := PSTS ; txnPropagateSites(TID,WS) .


 crl [fast-commit-failed] :
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG,READS,WRITES),LOG) >
     < TABLE : Table | table : REPLICA-TABLE >
     < RID : Replica | executing : < TID : Txn | operations : nil,
                                                 writeSet : WS,
                                                 startVTS : VTS >,
                       aborted : TXNS', history : DS, locked : LOCKS >
   =>
     < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),false,READS,WRITES),LOG) >
     < TABLE : Table | table : REPLICA-TABLE >
     < RID : Replica | executing : emptyTxnList,
                       aborted : (TXNS' ;; < TID : Txn | operations : nil,
                                                         writeSet : WS,
                                                         startVTS : VTS >),
                       history : DS, locked : LOCKS >
     if WS =/= empty /\
        allLocalPreferred(WS,RID,REPLICA-TABLE) /\
        (modified(WS,VTS,DS) or locked(WS,LOCKS)) .


 crl [slow-commit-receive-prepare-reply] :
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG',READS,WRITES),LOG) >
     < TABLE : Table | table : REPLICA-TABLE >
     < RID : Replica | executing : < TID : Txn | operations : nil, writeSet : WS, readSet : RS,
                                                 startVTS : VTS, txnSQN : TXNSQN >,
                       committed : TXNS', aborted : TXNS'', votes : VOTES,
                       voteSites : VSTS, sqn : SQN, history : DS,
                       committedVTS : VTS', locked : LOCKS, 
                       dsSites : PSTS, abortSites : ABORTS >
     (msg prepare-reply(TID,FLAG) from RID' to RID)
   =>
     < TABLE : Table | table : REPLICA-TABLE >
                   < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),true,RS,WS),LOG) >
                   < RID : Replica | executing : emptyTxnList,
                                     committed : (TXNS' ;; < TID : Txn | operations : nil, writeSet : WS, readSet : RS,
                                                                         startVTS : VTS, txnSQN : SQN' >),
                                     aborted : TXNS'', votes : VOTES ; vote(TID,RID',FLAG), voteSites : remove(TID,RID',VSTS), 
                                     sqn : SQN', history : DS', committedVTS : VTS'',
                                     locked : release(TID,LOCKS), dsSites : PSTS', abortSites : ABORTS >
                   propagateTxn(TID,SQN',VTS,WS,allServers(REPLICA-TABLE),RID)       
     if remove(TID,RID',VSTS)[TID] == empty /\
        allYes(TID,VOTES ; vote(TID,RID',FLAG)) /\
        SQN' := SQN + 1 /\
        DS' := update(WS,version(RID,SQN'),DS) /\
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := PSTS ; txnPropagateSites(TID,WS) /\
        ABORTS' := ABORTS ; voteSites(TID,yesSites(TID,VOTES ; vote(TID,RID',FLAG))) .


 crl [slow-commit-receive-prepare-reply] :
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG',READS,WRITES),LOG) >
     < TABLE : Table | table : REPLICA-TABLE >
     < RID : Replica | executing : < TID : Txn | operations : nil, writeSet : WS, readSet : RS,
                                                 startVTS : VTS, txnSQN : TXNSQN >,
                       committed : TXNS', aborted : TXNS'', votes : VOTES,
                       voteSites : VSTS, sqn : SQN, history : DS,
                       committedVTS : VTS', locked : LOCKS, 
                       dsSites : PSTS, abortSites : ABORTS >
     (msg prepare-reply(TID,FLAG) from RID' to RID)
   =>
     < TABLE : Table | table : REPLICA-TABLE >
     < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),false,READS,WRITES),LOG) >
                           < RID : Replica | executing : emptyTxnList,
                                             committed : TXNS',
                                             aborted : (TXNS'' ;; < TID : Txn | operations : nil, writeSet : WS, readSet : RS,
                                                                                startVTS : VTS, txnSQN : TXNSQN >),
                                             votes : VOTES ; vote(TID,RID',FLAG), voteSites : remove(TID,RID',VSTS), sqn : SQN, history : DS,
                                             committedVTS : VTS', locked : LOCKS, dsSites : PSTS,
                                             abortSites : ABORTS > 
     if remove(TID,RID',VSTS)[TID] == empty /\
        not allYes(TID,VOTES ; vote(TID,RID',FLAG)) /\
        yesSites(TID,VOTES ; vote(TID,RID',FLAG)) == empty /\
        SQN' := SQN + 1 /\
        DS' := update(WS,version(RID,SQN'),DS) /\
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := PSTS ; txnPropagateSites(TID,WS) /\
        ABORTS' := ABORTS ; voteSites(TID,yesSites(TID,VOTES ; vote(TID,RID',FLAG))) .



 crl [receive-aborted] :
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG,READS,WRITES),LOG) >
     < RID : Replica | executing : < TID : Txn | >, aborted : TXNS', abortSites : ABORTS >
     (msg aborted(TID) from RID' to RID)
   =>
     < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),false,READS,WRITES),LOG) >
            < RID : Replica | executing : emptyTxnList, aborted : (TXNS' ;; < TID : Txn | >),
                              abortSites : remove(TID,RID',ABORTS) >
     if remove(TID,RID',ABORTS)[TID] == empty .




 crl [receive-ds-durable-visible] :
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG,READS,WRITES),LOG) >
     < RID : Replica | recPropTxns : (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns : DTXNS, committedVTS : VTS', locked : LOCKS >
     (msg ds-durable(TID) from RID' to RID)
   =>
     < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),FLAG,READS,WRITES),LOG) >
     < RID : Replica | recPropTxns : (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns : (durableTxns(TID) ; DTXNS),
                       committedVTS : insert(RID',SQN,VTS'), locked : release(TID,LOCKS) >
     (msg visible(TID) from RID to RID')
     if VTS' gt VTS /\ s(VTS'[RID']) == SQN .



 crl [later-visible] :
     < M : Monitor | clock : GT, log : (TID |-> record(RID@M,T1,VTS1,FLAG,READS,WRITES),LOG) >
     < RID : Replica | recPropTxns : (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns : (nonDurableTxns(TID,RID') ; DTXNS),
                       committedVTS : VTS', locked : LOCKS >
   =>  
     < M : Monitor | clock : GT + 1, log : (TID |-> record(RID@M,T1,insert(RID,GT,VTS1),FLAG,READS,WRITES),LOG) >
     < RID : Replica | recPropTxns : (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns : (durableTxns(TID) ; DTXNS),
                       committedVTS : insert(RID',SQN,VTS'), locked : release(TID,LOCKS) >
     (msg visible(TID) from RID to RID')
     if VTS' gt VTS /\ s(VTS'[RID']) == SQN .
  
endom) 


