*** My previous P-store versions (3 different algorithms) were
*** a little bit more stand-alone, where only the read/write ops
*** a trans were done by gdur; the rest, including calling for
*** certification, the certification itself, and applying the
*** results of the certifications were done in a "standalone"
*** protocol/specification. This will instantiate our GDUR
*** framework to obtain the three versions of P-store.

*** Let's start with the most advanced one.

load gdur

mod XCAST-IS-ATOMIC-MULTICAST is
  including SOME-PARAMETERS-2 .
  including ATOMIC-MULTICAST .

  var MC : Content .
  var RID : Address .
  var RIDS : AddressSet .
 
  eq $$xcast MC from RID to RIDS
   = atomic-multicast MC from RID to RIDS .

  --- each initial state must contain the following data:
  op initAtomicMulticast : -> Actor .
  eq initAtomicMulticast = < 0 . 1 : A-Table | am-table: [emptyAME] > .
endm

mod PSTORE-GDUR is
  including GDUR .  

  var K : Key .
  vars V V2 : Value .
  vars VERSION VERSION2 : Version .
  var DS : DataStore .
  vars RS RS2 READSET WRITES : Set{KeyVersion} .
  vars WS WS2 : Set{KeyValue} .
  var TID : Address .
  var REPLICA-TABLE : ReplicaTable .
  vars RID RID3 : Address .
  vars AS AS' : AttributeSet .

  ---including GDUR-GROUP-COMMIT-ATOMIC-MULTICAST .
  --- this takes care of parameter/line 3
  --- in Algorithm 5 in GDUR paper


  including XCAST-IS-ATOMIC-MULTICAST .
  --- this should take care of parameter/line 4,
  --- some of which was already assumed in the group
  --- commit thing


  including VERSION-NAT .
  --- Parameter 2: defines the versions to be nonzero naturals
  --- but we also need to define the applyUpdates function:
  eq applyUpdates((< K, V, VERSION > , DS), (< K,V2 > , WS)) =
       < K, V2, VERSION + 1 > , applyUpdates(DS, WS) .
  eq applyUpdates(DS, WS) = DS [owise] .


  ---  Parameter 4: $$choose function:
  eq $$choose(K, (< K, V, VERSION > , < K, V2, VERSION2 > , DS), TID)
   = if VERSION >= VERSION2 then $$choose(K, (< K, V, VERSION > , DS), TID)
     else $$choose(K, (< K, V2, VERSION2 > , DS), TID) fi .

  eq $$choose(K, (< K, V, VERSION >, DS), TID) = < K, V, VERSION > [owise] .


  --- Parameter 5:  GDUR parameter $$certifying-objects:
  eq $$certifying-objects(< TID : Transaction | readSet: RS, writeSet: WS, AS >,
                          REPLICA-TABLE)
   =  (keysFromKeyVersions(RS) , keysFromKeyValues(WS)) .
   --- no special treatment of local and read-only transes


  --- Parameter 6: $$commute function:
  eq $$commute(< TID : Transaction | readSet: (< K, VERSION > , RS), AS >,
               RS2, ( < K,V > , WS2)) = false .
  eq $$commute(< TID : Transaction | writeSet: (< K,V >, WS), AS >,
               (< K, VERSION > , RS2), WS2) = false .
  eq $$commute(< TID : Transaction | AS >, RS, WS) = true [owise] .


  --- Parameter 7, $$certify:
  eq $$certify(RS, WS, DS) = certificationOk(RS, DS) .

  op certificationOk : Set{KeyVersion} DataStore -> Bool .
  eq certificationOk((< K, VERSION > , READSET), (< K, V, VERSION2 > , DS)) =
       (VERSION >= VERSION2) and certificationOk(READSET, ( < K, V, VERSION2 > , DS)) .
  --- Note: Note that the P-store paper, Algorithm Age, line 8,
  --- has a strict equality test here!
  --- as opposed to GDUR paper, algorithm 5, item 7!
  
  eq certificationOk(RS, DS) = true [owise] .

  --- The only problematic part is the hidden parameter
  --- vote-rcv-objects, whose value is not specified
  --- in the GDUR paper. It just says that "in most cases,
  --- vote-recv-obj(Ti) equals ws(Ti) ... However, for some
  --- protocols, all replicas must receive the certification
  --- vote.  Not so helpful.  
  --- Looking at the PStore paper, it seems that votes are 
  --- sent to WReplicas if Ti is GLOBAL. Otherwise no message
  --- is sent.  By email from Schipers we already know
  --- that to ensure that read-only transes are well taken
  --- care of, we should send to Replicas(Ti) and not just
  --- WReplicas(Ti).  (Optimizations are possible.)

  eq $$vote-receiving-objects(TID, RS, WS, REPLICA-TABLE)
   = if localTrans((keysFromKeyVersions(RS) , keysFromKeyValues(WS)), REPLICA-TABLE)
     then empty else (keysFromKeyVersions(RS) , keysFromKeyValues(WS)) fi .
  *** Note that I am ad-libbing a little bit here ...

  eq $$vote-snd-objects(TID, RS, WS) = keysFromKeyVersions(RS) .

  --- The cleaning up "parameters":
  eq $$postCommit(TID, RID, RID3, RS, WRITES) 
   = (msg commit(TID,WRITES) from RID to RID3) .  --- notify proxy

  eq $$postAbort(TID, RID, RID3, RS, WS) 
   = (msg abort(TID) from RID to RID3) .    --- notify proxy
endm


	       

