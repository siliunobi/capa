  --- Is history a sorted list? 
  --- Section 5.3, what does "last upate" mean? Last in list order, or in time?
  --- When initializing VTS, all replicas know each other, i.e., each replica holds
  --- the same length of vector, or VTS is simply set to empty?
  --- As of now, we implement the latter

load walter-aux

mod WALTER is
  including DELAY .
  including CLIENT-REPLICA .
  including MESSAGE .
  including REPLICA-TABLE .
  including VERSION-WALTER .
  including SAMPLER .
  including VALUES-NAT .
  including WALTER-AUX .

  vars AS AS' : AttributeSet .  vars TID RID RID' TABLE M : Address .
  vars RIDS DSTXNS GVTXNS : AddressSet .  vars TXNS TXNS' TXNS'' : ConfigList .
  vars T T1 : Float .  var OPS : OperationList .  var K : Key .
  vars V V' : Value .  var X : LocalVar .  var WS : Set{KeyValue} .
  var VARS : LocalVars .  var RS : Set{KeyVersion} .
  var REPLICA-TABLE : ReplicaTable .  var VERSION : Version .
  vars VTS VTS' VTS'' : VectorTime .  vars DS DS' : Datastore .
  vars VVS VVS' : ValueVersionList .  vars SQN SQN' TXNSQN : Nat .
  var EXPR : Expression .  var KS : KeySet .
  var TXN : Actor .  var LOCKS : Locks .
  vars VSTS VSTS' VSBS VSBS' ABORTS ABORTS' : VoteSites .
  vars RIDSS RIDSS' : AddressList .  var RT : KeyReplicas .
  vars VOTES VOTES' : Vote .  var FLAG : Bool .
  vars PSTS PSTS' : PropagateSites .  vars PTXNS PTXNS' PTXNS'' : PropagatedTxns .
  vars DTXNS DTXNS' : DurableTxns .  vars RECORD RECORD' : Record .

  var O@M : Address .  var GT@M : Nat .  var LOG@M : Log .
  vars VTS1@M VTS2@M : VectorTime . var FLAG@M : Bool . 
  vars READS@M WRITES@M : Set{KeyVersion} .


  ---??? Fig.13 in the walter paper says propagating a txn to ALL servers, why ALL?
  ---??? shouldn't all replicas concerning keys in the write set be enough?
  ---??? As explained in Section 4.4, ALL is for disaster-safe durability
  op propagateTxn : Address Nat VectorTime Set{KeyValue} AddressSet Address -> Config .
  eq propagateTxn(TID,SQN,VTS,WS,(RID ; RIDS),RID') = 
       propagateTxn(TID,SQN,VTS,WS,RIDS,RID')
       (msg propagate(TID,SQN,VTS,WS) from RID' to RID) .
  eq propagateTxn(TID,SQN,VTS,WS,emptyAddressSet,RID') = null .

  --- Walter runs 2pc among preferred sites of updated objects
  --- the key set sent to a server is a subset of the entire key set where each key's 
  --- preferred site is that server
  op prepareTxn : Address KeySet VectorTime AddressSet ReplicaTable Address -> Config .
  eq prepareTxn(TID,KS,VTS,(RID ; RIDS),REPLICA-TABLE,RID') =
       prepareTxn(TID,KS,VTS,RIDS,REPLICA-TABLE,RID')
       (msg prepare(TID,onSite(KS,RID,REPLICA-TABLE),VTS) from RID' to RID) .
  eq prepareTxn(TID,KS,VTS,emptyAddressSet,REPLICA-TABLE,RID') = null .

  op propagateAbort : Address AddressSet Address -> Config .
  eq propagateAbort(TID,(RID ; RIDS),RID') = 
       propagateAbort(TID,RIDS,RID')
       (msg abort(TID) from RID' to RID) .
  eq propagateAbort(TID,emptyAddressSet,RID') = null .

  op dsDurableTxn : Address AddressSet Address -> Config .
  eq dsDurableTxn(TID,(RID ; RIDS),RID') =
       dsDurableTxn(TID,RIDS,RID')
       (msg ds-durable(TID) from RID' to RID) .
  eq dsDurableTxn(TID,emptyAddressSet,RID') = null .


  *** Walter Dynamics ***


  ---??? simply consume "start" if no txn needs to start
  rl [receiving-start-when-no-txn-to-start] :
     < RID : Replica | gotTxns: emptyTxnList, AS >
     (start to RID)
   =>
     < RID : Replica | gotTxns: emptyTxnList, AS > .



  --- ??? "gotTxns" abstracts "client" away
  rl [start-txn] :
     (start to RID)
---     < M : Monitor | log: RECORD >
     < RID : Replica | gotTxns: (< TID : Txn | startVTS: empty, AS > ;; TXNS), 
                       executing: noActor,
                       committedVTS: VTS, AS' >
   =>
---     < M : Monitor | log: (RECORD ; record(TID,T,0.0,false)) >
     < RID : Replica | gotTxns: TXNS,
                       executing: < TID : Txn | startVTS: VTS, AS >, 
                       committedVTS: VTS, AS' > 
     (execute to RID) .
 

  --- ???
  rl [execute-read-own-write] :
     (execute to RID)
     < RID : Replica | executing: < TID : Txn | operations: ((X :=read K) OPS),
                                                writeSet: (< K,V >, WS),
                                                localVars: VARS, AS >, AS' >
   =>
     < RID : Replica | executing: < TID : Txn | operations: OPS,
                                                writeSet: (< K,V >, WS),
                                                localVars: insert(X,V,VARS), AS >, AS' >
     (execute to RID) .


  --- ??? A server's history may have ValueVersions of K even if K is not replicated at the server
  --- ??? Thus we need to check replica-table
 crl [execute-read-local] :
     (execute to RID)
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: ((X :=read K) OPS),
                                                writeSet: WS,
                                                readSet: RS,
                                                localVars: VARS, 
                                                startVTS: VTS, AS >, 
                       history: DS, AS' >
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: OPS,
                                                writeSet: WS,
                                                readSet: (< K,VERSION >,RS),
                                                localVars: insert(X,V,VARS),
                                                startVTS: VTS, AS >, 
                       history: DS, AS' >
     (execute to RID)
     if (not (K in WS)) /\ localReplica(K,RID,REPLICA-TABLE) /\
        < V,VERSION >  := choose(VTS,DS[K]) .

  
  --- ???
 crl [execute-read-remote] :
     (execute to RID)
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: ((X :=read K) OPS),
                                                writeSet: WS, 
                                                startVTS: VTS, AS >, AS' >
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: (waitRemote(K,X) OPS),
                                                writeSet: WS, 
                                                startVTS: VTS, AS >, AS' >
     (msg request(K,TID,VTS) from RID to RID')
     if (not (K in WS)) /\ (not localReplica(K,RID,REPLICA-TABLE)) /\
        RID' := preferredSite(K,REPLICA-TABLE) .  --- returns the preferred site of K, not a set of sites in GDUR
  
  --- ???
  crl [receive-remote-request] :
      < RID : Replica | history: DS, AS >
      (msg request(K,TID,VTS) from RID' to RID)
    =>
      < RID : Replica | history: DS, AS >
      (msg reply(TID,K,< V,VERSION >) from RID to RID') 
      if < V,VERSION > := choose(VTS,DS[K]) .


  --- ??? Walter MERGES the fetched data with any updates in the local history
  --- ??? and in writeSet. But how???
  --- ??? My current understanding is that the fetched value will be in readSet for possible later writes
  --- ??? in the same txn; probably no need to update history at this moment because when slowCommit,
  --- ??? the version will be add to history 
  --- ??? Another point is that the fetched value is already checked by "choose", so it will not affect
  --- ??? the "unmodified" check in fastCommit
  --- ??? Anyway, as of now, we define "merge" 
   rl [receive-remote-reply] :
      < RID : Replica | executing: < TID : Txn | operations: (waitRemote(K,X) OPS),
                                                 readSet: RS,
                                                 localVars: VARS, AS >,
                        history: DS, AS' >
      (msg reply(TID,K,< V,VERSION >) from RID' to RID)
    =>
      < RID : Replica | executing: < TID : Txn | operations: OPS,
                                                 readSet: (< K,VERSION >,RS),
                                                 localVars: insert(X,V,VARS), AS >,
                        history: merge(K,< V,VERSION >,DS), AS' > 
      (execute to RID) .

  --- ???
  rl [execute-write] :
     (execute to RID)
     < RID : Replica | executing: < TID : Txn | operations: (write(K,EXPR) OPS),
                                                localVars: VARS,
                                                writeSet: WS, AS >, AS' >
   =>
     < RID : Replica | executing: < TID : Txn | operations: OPS,
                                                localVars: VARS,
                                                writeSet: (< K,eval(EXPR,VARS) >,WS), AS >, AS' > 
     (execute to RID) .   
  
  --- ??? My understanding is to simply commit read-only txns  
  --- ??? Note here we don't send done(TID) to the client
  --- ??? because as said we plan to remove client in our model
   rl [commit-read-only-txn] :
      (execute to RID)
---      < M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
      < RID : Replica | executing: < TID : Txn | operations: nil, 
                                                 writeSet: empty, AS >, 
                        committed: TXNS', AS' >
    =>
---      < M : Monitor | log: (RECORD ; record(TID,T1,T,true) ; RECORD') >
      < RID : Replica | executing: noActor, 
                        committed: (TXNS' ;; < TID : Txn | operations: nil, 
                                                           writeSet: empty, AS >), AS' > 
      (start to RID) .

  --- ??? We do not need "submitted" because txns are executed in order
  --- ??? Thus unless the txn is decided it is safe to leave it in "executing"
  --- ??? "wait until" in the walter paper says walter waits until the local txn with preceding
  --- ??? sqn has been committed. Since we assume txns from the same server are executed in order,
  --- ??? I don't see any case that "wait until" applies???
  --- ??? So we implement as instant commit if unmodified and unlocked
 crl [fast-commit-success] :  --- committedVTS[i] = x.sqn-1
     (execute to RID)
---     < M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: nil,
                                                writeSet: WS,
                                                startVTS: VTS,
                                                txnSQN: TXNSQN, AS >, 
                       committed: TXNS',
                       history: DS,  
                       locked: LOCKS,
                       sqn: SQN, 
                       committedVTS: VTS',
                       dsSites: PSTS, AS' >
   =>
---     < M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: noActor,
                       committed: (TXNS' ;; < TID : Txn | operations: nil,
                                                          writeSet: WS,
                                                          startVTS: VTS, 
                                                          txnSQN: SQN', AS >),
                       history: DS', 
                       locked: LOCKS,
                       sqn: SQN', 
                       committedVTS: VTS'',
                       dsSites: PSTS', AS' >
     propagateTxn(TID,SQN',VTS,WS,allServers(REPLICA-TABLE),RID)  
     (start to RID)
     ---??? propagate to ALL servers, not just all replicas concerning the keys in writeSet
     ---??? according to Section 4.3 in the walter paper
     ---??? I doubt what I said above: it should be all replicas concerning the keys in writeSet
     ---??? because the owise replica will do nothing upon receiving the propagate msg
     ---??? also, section 4.3 talks about a txn can be committed at the server where it is not replicated
     ---??? it has nothing to do with propagate, but only commit 
     if WS =/= empty /\
        allLocalPreferred(WS,RID,REPLICA-TABLE) /\
        (not modified(WS,VTS,DS)) /\
        (not locked(WS,LOCKS)) /\
        SQN' := SQN + 1 /\
        DS' := update(WS,< RID,SQN' >,DS) /\
---        VTS'[RID] == SQN /\  --- we put this equation here to identify any counterexample supporting "wait until"
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := PSTS ; txnPropagateSites(TID,WS) .
  

 crl [fast-commit-failed] :
     (execute to RID)
---     < M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: nil,
                                                writeSet: WS,
                                                startVTS: VTS, AS >,
                       aborted: TXNS',
                       history: DS,
                       locked: LOCKS, AS' >
   =>
---     < M : Monitor | log: (RECORD ; record(TID,T1,T,false) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: noActor,
                       aborted: (TXNS' ;; < TID : Txn | operations: nil,
                                                        writeSet: WS,
                                                        startVTS: VTS, AS >),
                       history: DS,
                       locked: LOCKS, AS' >
     (start to RID)
     if WS =/= empty /\
        allLocalPreferred(WS,RID,REPLICA-TABLE) /\
        (modified(WS,VTS,DS) or locked(WS,LOCKS)) .


  --- ???
  crl [slow-commit-prepare] :
      (execute to RID)
      < TABLE : Table | table: REPLICA-TABLE >
      < RID : Replica | executing: < TID : Txn | operations: nil,
                                                 writeSet: WS,
                                                 startVTS: VTS, AS >,
                        voteSites: VSTS, AS' >
    =>
      < TABLE : Table | table: REPLICA-TABLE >
      < RID : Replica | executing: < TID : Txn | operations: nil,
                                                 writeSet: WS,
                                                 startVTS: VTS, AS >,
                        voteSites: (VSTS ; voteSites(TID,RIDS)), AS' >
      prepareTxn(TID,keys(WS),VTS,RIDS,REPLICA-TABLE,RID)
      if WS =/= empty /\
         (not allLocalPreferred(WS,RID,REPLICA-TABLE)) /\
         RIDS := allPreferredSites(WS,REPLICA-TABLE) /\
         (not (TID in VSTS)) .


   --- ???
   rl [slow-commit-receive-prepare] :
      < RID : Replica | locked: LOCKS,
                        history: DS, AS >
      (msg prepare(TID,KS,VTS) from RID' to RID)
    =>
      if (not locked(KS,LOCKS)) and (not modified(KS,VTS,DS)) 
        then < RID : Replica | locked: (addLock(KS,TID),LOCKS),
                               history: DS, AS >
             (msg prepare-reply(TID,true) from RID to RID')
        else < RID : Replica | locked: LOCKS,
                               history: DS, AS >
             (msg prepare-reply(TID,false) from RID to RID')
      fi .


  --- ???
 crl [slow-commit-receive-prepare-reply] :
---     < M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: nil,
                                                writeSet: WS,
                                                startVTS: VTS,
                                                txnSQN: TXNSQN, AS >,
                       committed: TXNS',
                       aborted: TXNS'',
                       votes: VOTES,
                       voteSites: VSTS,
                       sqn: SQN, 
                       history: DS,
                       committedVTS: VTS',
                       locked: LOCKS, 
                       dsSites: PSTS,
                       abortSites: ABORTS, AS' >
     (msg prepare-reply(TID,FLAG) from RID' to RID)
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     if VSTS'[TID] == emptyAddressSet --- all votes received
       then 
            if allYes(TID,VOTES')  --- all yes votes
              then ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
                   < RID : Replica | executing: noActor,
                                     committed: (TXNS' ;; < TID : Txn | operations: nil,
                                                                        writeSet: WS,
                                                                        startVTS: VTS, 
                                                                        txnSQN: SQN', AS >),
                                     aborted: TXNS'',
                                     votes: VOTES',
                                     voteSites: VSTS', 
                                     sqn: SQN', 
                                     history: DS',
                                     committedVTS: VTS'',
                                     locked: release(TID,LOCKS),
                                     dsSites: PSTS',
                                     abortSites: ABORTS, AS' >
                   propagateTxn(TID,SQN',VTS,WS,allServers(REPLICA-TABLE),RID) 
                   (start to RID) 
              else if RIDS =/= emptyAddressSet
                     then ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
                          < RID : Replica | executing: < TID : Txn | operations: nil,
                                                                     writeSet: WS,
                                                                     startVTS: VTS,
                                                                     txnSQN: TXNSQN, AS >,
                                            committed: TXNS',
                                            aborted: TXNS'',
                                            votes: VOTES',
                                            voteSites: VSTS',
                                            sqn: SQN,
                                            history: DS,
                                            committedVTS: VTS',
                                            locked: LOCKS,
                                            dsSites: PSTS,
                                            abortSites: ABORTS', AS' >
                          propagateAbort(TID,RIDS,RID)  --- "remote call" abort; abort the txn locally when receiving all acks to remote calls
                      else ---< M : Monitor | log: (RECORD ; record(TID,T1,T,false) ; RECORD') >
                           < RID : Replica | executing: noActor,
                                             committed: TXNS',
                                             aborted: (TXNS'' ;; < TID : Txn | operations: nil,
                                                                               writeSet: WS,
                                                                               startVTS: VTS,
                                                                               txnSQN: TXNSQN, AS >),
                                             votes: VOTES',
                                             voteSites: VSTS',
                                             sqn: SQN,
                                             history: DS,
                                             committedVTS: VTS',
                                             locked: LOCKS,
                                             dsSites: PSTS,
                                             abortSites: ABORTS, AS' >
                           (start to RID) 
                    fi
                  
            fi
       else ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
            < RID : Replica | executing: < TID : Txn | operations: nil,
                                                       writeSet: WS,
                                                       startVTS: VTS,
                                                       txnSQN: TXNSQN, AS >,
                              committed: TXNS',
                              aborted: TXNS'',
                              votes: VOTES',
                              voteSites: VSTS',
                              sqn: SQN, 
                              history: DS,
                              committedVTS: VTS',
                              locked: LOCKS,
                              dsSites: PSTS,
                              abortSites: ABORTS, AS' >
     fi 
     if VSTS' := remove(TID,RID',VSTS) /\
        VOTES' := VOTES ; vote(TID,RID',FLAG) /\
        SQN' := SQN + 1 /\
        DS' := update(WS,< RID,SQN' >,DS) /\
---        VTS'[RID] == SQN /\  --- we put this equation here to identify any counterexample supporting "wait until"
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := PSTS ; txnPropagateSites(TID,WS) /\
        RIDS := yesSites(TID,VOTES') /\
        ABORTS' := ABORTS ; voteSites(TID,RIDS) .


  --- ??? no need for ack??? The walter paper doesn't talk about it.
  --- ??? Based on my understanding of "remote call", I implement "ack"
  rl [slow-commit-receive-abort] :
     < RID : Replica | locked: LOCKS, AS >
     (msg abort(TID) from RID' to RID)
   =>
     < RID : Replica | locked: release(TID,LOCKS), AS > 
     (msg aborted(TID) from RID to RID') .

  --- ??? 
 crl [receive-aborted] :
     ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
     < RID : Replica | executing: < TID : Txn | AS >,
                       aborted: TXNS',
                       abortSites: ABORTS, AS' >
     (msg aborted(TID) from RID' to RID)
   =>
     if ABORTS'[TID] == emptyAddressSet  --- upon receiving all acks to remote calls, abort the txn locally
       then ---< M : Monitor | log: (RECORD ; record(TID,T1,T,false) ; RECORD') >
            < RID : Replica | executing: noActor,
                              aborted: (TXNS' ;; < TID : Txn | AS >),
                              abortSites: ABORTS', AS' >
            (start to RID)
       else ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,false) ; RECORD') >
            < RID : Replica | executing: < TID : Txn | AS >,
                              aborted: TXNS',
                              abortSites: ABORTS', AS' >
     fi
     if ABORTS' := remove(TID,RID',ABORTS) .

  --- ???
 crl [receive-propagate-ack] :
     ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | dsSites: PSTS,
                       vsbSites: VSBS,
                       committed: (TXNS ;; < TID : Txn | writeSet: WS,
                                                         startVTS: VTS,
                                                         txnSQN: SQN, AS > ;; TXNS'),
                       dsTxns: DSTXNS, 
                       gvTxns: GVTXNS, AS' >
     (msg propagate-ack(TID) from RID' to RID)
   => 
     < TABLE : Table | table: REPLICA-TABLE >
     if dsDurable(TID,PSTS')
       then if RIDS =/= emptyAddressSet
              then ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
                   < RID : Replica | dsSites: PSTS',
                                     vsbSites: VSBS',
                                     committed: (TXNS ;; < TID : Txn | writeSet: WS,
                                                                       startVTS: VTS,
                                                                       txnSQN: SQN, AS > ;; TXNS'),
                                     dsTxns: (TID ; DSTXNS),
                                     gvTxns: GVTXNS, AS' >
                   dsDurableTxn(TID,RIDS,RID)
              else ---< M : Monitor | log: (RECORD ; record(TID,T1,T,true) ; RECORD') >
                   < RID : Replica | dsSites: PSTS',
                                     vsbSites: VSBS',
                                     committed: (TXNS ;; < TID : Txn | writeSet: WS,
                                                                       startVTS: VTS,
                                                                       txnSQN: SQN, AS > ;; TXNS'),
                                     dsTxns: (TID ; DSTXNS),
                                     gvTxns: (TID ; GVTXNS), AS' >
            fi
       else ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
            < RID : Replica | dsSites: PSTS',
                              vsbSites: VSBS,
                              committed: (TXNS ;; < TID : Txn | writeSet: WS,
                                                                startVTS: VTS,
                                                                txnSQN: SQN, AS > ;; TXNS'),
                              dsTxns: DSTXNS,
                              gvTxns: GVTXNS, AS' >
     fi
     if PSTS' := add(TID,keys(WS),RID',REPLICA-TABLE,PSTS)  /\
        (not TID in DSTXNS) /\  --- if TID in DSTXNS, later-coming propagate-ack will be simply ignored
        RIDS := allServers(REPLICA-TABLE) \ RID /\
        VSBS' := VSBS ; voteSites(TID,RIDS) .

  --- ???
 crl [receive-propagate-ack-after-ds-durable-mark] :
     < RID : Replica | dsTxns: DSTXNS, AS >
     (msg propagate-ack(TID) from RID' to RID)
   =>
     < RID : Replica | dsTxns: DSTXNS, AS >
     if TID in DSTXNS .


  --- ???
 crl [receive-visible] :
     ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
     < RID : Replica | vsbSites: VSBS,
                       gvTxns: GVTXNS, AS >
     (msg visible(TID) from RID' to RID)
   =>
     if VSBS'[TID] == emptyAddressSet
       then ---< M : Monitor | log: (RECORD ; record(TID,T1,T,true) ; RECORD') >
            < RID : Replica | vsbSites: VSBS',
                              gvTxns: (TID ; GVTXNS), AS >
       else ---< M : Monitor | log: (RECORD ; record(TID,T1,0.0,true) ; RECORD') >
            < RID : Replica | vsbSites: VSBS',
                              gvTxns: GVTXNS, AS >
     fi
     if VSBS' := remove(TID,RID',VSBS) .


  --- ???
 crl [receive-propagate-empty-VTS] :
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotVTS: VTS',
                       history: DS,
                       recPropTxns: PTXNS, AS' >
     (msg propagate(TID,SQN,empty,WS) from RID' to RID)
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     if RID =/= RID'
       then < RID : Replica | gotVTS: VTS'', 
                              history: DS',
                              recPropTxns: PTXNS', AS' >
            (msg propagate-ack(TID) from RID to RID')
       else < RID : Replica | gotVTS: VTS'', 
                              history: DS,
                              recPropTxns: PTXNS', AS' >
            (msg propagate-ack(TID) from RID to RID')
     fi
     if PTXNS' := propagatedTxns(TID,SQN,empty) ; PTXNS /\ 
        VTS'' := insert(RID',SQN,VTS') /\
        DS' := update(locRepWS(WS,RID,REPLICA-TABLE),< RID',SQN >,DS) .

 crl [receive-propagate-non-empty-VTS] :
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotVTS: VTS',
                       history: DS,
                       recPropTxns: PTXNS, AS' >
     (msg propagate(TID,SQN,VTS,WS) from RID' to RID)
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     if s(VTS'[RID']) == SQN and (VTS' gt VTS)
       then if RID =/= RID'
              then < RID : Replica | gotVTS: VTS'', 
                                     history: DS',
                                     recPropTxns: PTXNS', AS' >
                   (msg propagate-ack(TID) from RID to RID')
              else < RID : Replica | gotVTS: VTS'', 
                                     history: DS,
                                     recPropTxns: PTXNS', AS' >
                   (msg propagate-ack(TID) from RID to RID')
            fi
       else < RID : Replica | gotVTS: VTS', 
                              history: DS,
                              recPropTxns: PTXNS'', AS' >
     fi
     if PTXNS' := propagatedTxns(TID,SQN,VTS) ; PTXNS /\
        PTXNS'' := nonPropagatedTxns(TID,SQN,VTS,WS,RID') ; PTXNS /\  
        VTS'' := insert(RID',SQN,VTS') /\
        DS' := update(locRepWS(WS,RID,REPLICA-TABLE),< RID',SQN >,DS) /\
        VTS =/= empty .
  

  --- ??? Deal with the buffered propagate msgs
  --- ??? recPropTxns may now have nondeterminism!!!
 crl [later-propagate-ack] :
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotVTS: VTS',
                       history: DS,
                       recPropTxns: (nonPropagatedTxns(TID,SQN,VTS,WS,RID') ; PTXNS), AS >
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     if RID =/= RID'
       then < RID : Replica | gotVTS: VTS'', 
                              history: DS', 
                              recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS), AS >
            (msg propagate-ack(TID) from RID to RID')
       else < RID : Replica | gotVTS: VTS'', 
                              history: DS,
                              recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS), AS >
            (msg propagate-ack(TID) from RID to RID')
     fi
     if s(VTS'[RID']) == SQN /\
        VTS' gt VTS /\
        VTS'' := insert(RID',SQN,VTS') /\
        DS' := update(locRepWS(WS,RID,REPLICA-TABLE),< RID',SQN >,DS) .

  
  --- ??? 
 crl [receive-ds-durable-visible] :
     < RID : Replica | recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns: DTXNS,
                       committedVTS: VTS',
                       locked: LOCKS, AS' >
     (msg ds-durable(TID) from RID' to RID)
   =>
     < RID : Replica | recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns: (durableTxns(TID) ; DTXNS),
                       committedVTS: insert(RID',SQN,VTS'),
                       locked: release(TID,LOCKS), AS' >
     (msg visible(TID) from RID to RID')
     if VTS' gt VTS /\
        s(VTS'[RID']) == SQN .

  --- ???
 crl [receive-ds-durable-not-visible-not-match-condition] :
     < RID : Replica | recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns: DTXNS,
                       committedVTS: VTS', AS' >
     (msg ds-durable(TID) from RID' to RID)
   =>
     < RID : Replica | recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns: (nonDurableTxns(TID,RID') ; DTXNS),
                       committedVTS: VTS', AS' >
     if ((not VTS' gt VTS) or 
        s(VTS'[RID']) =/= SQN) . 


  --- ??? the replica has got the propagate msg but failed to ack it
  rl [receive-ds-durable-not-visible-non-propagated-1] :
     < RID : Replica | recPropTxns: (nonPropagatedTxns(TID,SQN,VTS,WS,RID') ; PTXNS),
                       recDurableTxns: DTXNS, AS' >
     (msg ds-durable(TID) from RID' to RID)
   =>
     < RID : Replica | recPropTxns: (nonPropagatedTxns(TID,SQN,VTS,WS,RID') ; PTXNS),
                       recDurableTxns: (nonDurableTxns(TID,RID') ; DTXNS), AS' > .

  --- ??? the replica hasn't got the propagate msg
 crl [receive-ds-durable-not-visible-non-propagated-2] :
     < RID : Replica | recPropTxns: PTXNS,
                       recDurableTxns: DTXNS, AS' >
     (msg ds-durable(TID) from RID' to RID)
   =>
     < RID : Replica | recPropTxns: PTXNS,
                       recDurableTxns: (nonDurableTxns(TID,RID') ; DTXNS), AS' >
     if not TID in PTXNS .

  --- ??? Deal with the buffered ds-durable msgs
  --- ??? recDurableTxns may now have nondeterminism!!!
 crl [later-visible] :
     < RID : Replica | recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns: (nonDurableTxns(TID,RID') ; DTXNS),
                       committedVTS: VTS',
                       locked: LOCKS, AS' >
   =>  
     < RID : Replica | recPropTxns: (propagatedTxns(TID,SQN,VTS) ; PTXNS),
                       recDurableTxns: (durableTxns(TID) ; DTXNS),
                       committedVTS: insert(RID',SQN,VTS'),
                       locked: release(TID,LOCKS), AS' >
     (msg visible(TID) from RID to RID')    
     if VTS' gt VTS /\
        s(VTS'[RID']) == SQN .

endm 


