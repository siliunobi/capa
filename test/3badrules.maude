  --- Is history a sorted list? 
  --- Section 5.3, what does "last upate" mean? Last in list order, or in time?
  --- When initializing VTS, all replicas know each other, i.e., each replica holds
  --- the same length of vector, or VTS is simply set to empty?
  --- As of now, we implement the latter

load walter-aux-mc

mod WALTER is
  including CLIENT-REPLICA .
  including MESSAGE .
  including REPLICA-TABLE .
  including VERSION-WALTER .
  including VALUES-NAT .
  including WALTER-AUX .
 

  vars AS AS' : AttributeSet .
  vars TID RID RID' TABLE M : Address .
  vars RIDS DSTXNS GVTXNS : AddressSet .
  vars TXNS TXNS' TXNS'' : ConfigList .
  var OPS : OperationList .
  var K : Key .
  vars V V' : Value .
  var X : LocalVar .
  var WS : Set{KeyValue} .
  var VARS : LocalVars .
  var RS : Set{KeyVersion} .
  var REPLICA-TABLE : ReplicaTable .
  var VERSION : Version .
  vars VTS VTS' VTS'' : VectorTime .
  vars DS DS' : Datastore .
  vars VVS VVS' : ValueVersionList .
  vars SQN SQN' TXNSQN : Nat .
  var EXPR : Expression .
  var KS : KeySet .
  var TXN : Actor .
  var LOCKS : Locks .
  vars VSTS VSTS' VSBS VSBS' ABORTS ABORTS' : VoteSites .
  vars RIDSS RIDSS' : AddressList .
  var RT : KeyReplicas .
  vars VOTES VOTES' : Vote .
  var FLAG : Bool .
  vars PSTS PSTS' : PropagateSites .
  vars PTXNS PTXNS' PTXNS'' : PropagatedTxns .
  vars DTXNS DTXNS' : DurableTxns .
  vars RECORD RECORD' : Record .

  var O@M : Address .  var GT : Float .  var LOG@M : Log .
  vars VTS1@M VTS2@M : VectorTime . var FLAG@M : Bool . 
  vars READS@M WRITES@M : Set{KeyVersion} .
  var GT@M : Nat .

  ---??? Fig.13 in the walter paper says propagating a txn to ALL servers, why ALL?
  ---??? shouldn't all replicas concerning keys in the write set be enough?
  ---??? As explained in Section 4.4, ALL is for disaster-safe durability
  op propagateTxn : Address Nat VectorTime Set{KeyValue} AddressSet Address -> Config .
  eq propagateTxn(TID,SQN,VTS,WS,(RID ; RIDS),RID') = 
       propagateTxn(TID,SQN,VTS,WS,RIDS,RID')
       (msg propagate(TID,SQN,VTS,WS) from RID' to RID) .
  eq propagateTxn(TID,SQN,VTS,WS,emptyAddressSet,RID') = null .


  --- Walter runs 2pc among preferred sites of updated objects
  --- the key set sent to a server is a subset of the entire key set where each key's 
  --- preferred site is that server
  op prepareTxn : Address KeySet VectorTime AddressSet ReplicaTable Address -> Config .
  eq prepareTxn(TID,KS,VTS,(RID ; RIDS),REPLICA-TABLE,RID') =
       prepareTxn(TID,KS,VTS,RIDS,REPLICA-TABLE,RID')
       (msg prepare(TID,onSite(KS,RID,REPLICA-TABLE),VTS) from RID' to RID) .
  eq prepareTxn(TID,KS,VTS,emptyAddressSet,REPLICA-TABLE,RID') = null .


  op propagateAbort : Address AddressSet Address -> Config .
  eq propagateAbort(TID,(RID ; RIDS),RID') = 
       propagateAbort(TID,RIDS,RID')
       (msg abort(TID) from RID' to RID) .
  eq propagateAbort(TID,emptyAddressSet,RID') = null .


  op dsDurableTxn : Address AddressSet Address -> Config .
  eq dsDurableTxn(TID,(RID ; RIDS),RID') =
       dsDurableTxn(TID,RIDS,RID')
       (msg ds-durable(TID) from RID' to RID) .
  eq dsDurableTxn(TID,emptyAddressSet,RID') = null .

  *** Walter Dynamics ***
   rl [commit-read-only-txn] :
      (execute to RID)
      ---< O@M : Monitor | clock: GT@M, log: (TID |-> 
        ---< VTS1@M,VTS2@M,FLAG@M,READS@M,WRITES@M >,LOG@M) > 
      < RID : Replica | executing: < TID : Txn | operations: nil, 
                                                 writeSet: empty,
                                                 readSet: RS,
                                                 version: VERSION, AS >, 
                        committed: TXNS', AS' >
    =>
      ---< O@M : Monitor | clock: (GT@M + 1), log: (TID |-> 
        ---< VTS1@M,insert(RID,GT@M,VTS2@M),true,RS,kver(empty,VERSION) >,LOG@M) >
      < RID : Replica | executing: noActor, 
                        committed: (TXNS' ;; < TID : Txn | operations: nil, 
                                                           writeSet: empty,
                                                           readSet: RS,
                                                           version: VERSION, AS >), AS' > 
      (start to RID) .


 crl [fast-commit-success] :  --- committedVTS[i] = x.sqn-1
     (execute to RID)
     ---< O@M : Monitor | clock: GT@M, log: (TID |-> 
       ---< VTS1@M,VTS2@M,FLAG@M,READS@M,WRITES@M >,LOG@M) >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: nil,
                                                writeSet: WS,
                                                startVTS: VTS,
                                                txnSQN: TXNSQN,
                                                readSet: RS,
                                                version: VERSION, AS >, 
                       committed: TXNS',
                       history: DS,  
                       locked: LOCKS,
                       sqn: SQN, 
                       committedVTS: VTS',
                       dsSites: PSTS, AS' >
   =>
     ---< O@M : Monitor | clock: (GT@M + 1), log: (TID |-> 
       ---< VTS1@M,insert(RID,GT@M,VTS2@M),true,RS,kver(WS,< RID,SQN' >) >,LOG@M) >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: noActor,
                       committed: (TXNS' ;; < TID : Txn | operations: nil,
                                                          writeSet: WS,
                                                          startVTS: VTS, 
                                                          txnSQN: SQN',
***NEW
                                                          readSet: RS,
                                                          version: < RID,SQN' >, AS >),
                       history: DS', 
                       locked: LOCKS,
                       sqn: SQN', 
                       committedVTS: VTS'',
                       dsSites: PSTS', AS' >
     propagateTxn(TID,SQN',VTS,WS,allServers(REPLICA-TABLE),RID)  
     (start to RID)
     ---??? propagate to ALL servers, not just all replicas concerning the keys in writeSet
     ---??? according to Section 4.3 in the walter paper
     ---??? I doubt what I said above: it should be all replicas concerning the keys in writeSet
     ---??? because the owise replica will do nothing upon receiving the propagate msg
     ---??? also, section 4.3 talks about a txn can be committed at the server where it is not replicated
     ---??? it has nothing to do with propagate, but only commit 
     if WS =/= empty /\
        allLocalPreferred(WS,RID,REPLICA-TABLE) /\
        (not modified(WS,VTS,DS)) /\
        (not locked(WS,LOCKS)) /\
        SQN' := SQN + 1 /\
        DS' := update(WS,< RID,SQN' >,DS) /\
---        VTS'[RID] == SQN /\  --- we put this equation here to identify any counterexample supporting "wait until"
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := (PSTS ; txnPropagateSites(TID,WS)) .


 crl [slow-commit-receive-prepare-reply-2] :
     ---< O@M : Monitor | clock: GT@M, log: (TID |-> 
       ---< VTS1@M,VTS2@M,FLAG@M,READS@M,WRITES@M >,LOG@M) >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: nil,
                                                writeSet: WS,
                                                startVTS: VTS,
                                                txnSQN: TXNSQN,
                                                readSet: RS,
                                                version: VERSION, AS >,
                       committed: TXNS',
                       aborted: TXNS'',
                       votes: VOTES,
                       voteSites: VSTS,
                       sqn: SQN, 
                       history: DS,
                       committedVTS: VTS',
                       locked: LOCKS, 
                       dsSites: PSTS,
                       abortSites: ABORTS, AS' >
     (msg prepare-reply(TID,FLAG) from RID' to RID)
   =>
     ---< O@M : Monitor | clock: (GT@M + 1), log: (TID |-> 
       ---< VTS1@M,insert(RID,GT@M,VTS2@M),true,RS,kver(WS,< RID,SQN' >) >,LOG@M) > 
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: noActor,
                       committed: (TXNS' ;; < TID : Txn | operations: nil,
                                                          writeSet: WS,
                                                          startVTS: VTS, 
                                                          txnSQN: SQN',
                                                          readSet: RS,
                                                          version: < RID,SQN' >, AS >),
                                     aborted: TXNS'',
                                     votes: (VOTES ; vote(TID,RID',FLAG)),
                                     voteSites: remove(TID,RID',VSTS), 
                                     sqn: SQN', 
                                     history: DS',
                                     committedVTS: VTS'',
                                     locked: release(TID,LOCKS),
                                     dsSites: PSTS',
                                     abortSites: ABORTS, AS' >
                   propagateTxn(TID,SQN',VTS,WS,allServers(REPLICA-TABLE),RID) 
                   (start to RID)

     if remove(TID,RID',VSTS)[TID] == emptyAddressSet /\
        allYes(TID,(VOTES ; vote(TID,RID',FLAG))) /\
        SQN' := SQN + 1 /\
        DS' := update(WS,< RID,SQN' >,DS) /\
        VTS'' := insert(RID,SQN',VTS') /\
        PSTS' := (PSTS ; txnPropagateSites(TID,WS)) .


endm

